#include <iostream>
using namespace std;

//ћножественное наследование - каждому свои свойства и методы
// акие могут быть проблемы:
//1) "”странение неоднозначности", можно заменить все свойства без букв, тип prop_a = prop, get_a = get,
//Ќо тогда нам нужно будет в наследнике указывать к какому классу будет принадлежать свойство так A::prop = a, B::get()
//2) "–омбовоое наследование" - допустим есть класс A с методом func, его наследники B1 и B2, 
//   и есть C, который наследник B1 и B2 сразу, и если мы заходим вызвать метод func в классе C,
//   C c1;
//   c1.func();
//   “о тут будет ошибка, так как он просто не знает метод какого класса вызывать B1 или B2.
//   –ешение, просто указать из какого класса вызываем:
//   c1.B1::func();

class A {
	//ƒл€ наследовани€
protected:
	int	prop_a;
public:
	A(int a) : prop_a(a){
	}

	//”станавливаем свойство
	void set_a(int a) {
		prop_a = a;
	}

	//¬озвращаем свойство
	int get_a() {
		return prop_a;
	}
};

class B {
	//ƒл€ наследовани€
protected:
	int	prop_b;
public:
	B(int b) : prop_b(b) {
	}

	//”станавливаем свойство
	void set_b(int b) {
		prop_b = b;
	}

	//¬озвращаем свойство
	int get_b() {
		return prop_b;
	}
};

//—делаем наследника классов A и B
//private потому что в программе мы не будем использовать методы и свойства A и B, а только внутри класса C
class C : private A, private B {
	//“ут уже можно private так как наследовать его не собираемс€
private:
	int prop_c;
public:
	//¬ызываем конструкторы соответствующих классов, это где A(a), B(b)
	C(int a, int b, int c) : A(a), B(b), prop_c(c) {
	}
	//”станавливаем свойство
	void set_props(int a, int b, int c) {
		prop_a = a;
		prop_b = b;
		prop_c = c;
	}

	//¬озвращаем свойство
	int get_c() {
		return prop_c;
	}

	void show_props() {
		cout << "a = " << get_a() << endl;
		cout << "b = " << get_b() << endl;
		cout << "c = " << get_c() << endl;
	}
};

int main() {
	setlocale(0, "");

	//ћожно использовать этот
	C c1(3, 7, 1);
	
	//ћожно использовать этот без конструкторов
	//c1.set_props(4, 1, 8);

	//¬ывод
	c1.show_props();

	system("pause");
	return 0;
}