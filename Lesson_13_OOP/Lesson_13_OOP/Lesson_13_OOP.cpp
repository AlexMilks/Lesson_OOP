#include <iostream>
using namespace std;

//Указатели - это переменная которая хранит адрес области со значением
//Приемущества:
//   1) Создание списков (стек, очередь)
//   2) Простое оперирование большими объектами
//   3) Получение доступа к элементам массива
//   4) Передача массивов в функцию
//   5) Удаление объектов
//   6) Создание динамических массивов

//Перебор массива с помощью указателей
//Имя массива это адрес его элемента
//Просто сдвигаемся на количество байтов в int, вроде там 4 байт

//Передача указателей в функцию
//Сначала в функцию передаём ссылку, и в определение её разэминовываем и так работаем с этим
//Есть ещё по ссылке, с ней не путать

//Прототип, указывает где лежит переменная
void addFive(int*);

int main() {
	setlocale(0, "");

	int var1 = 6;
	int var2 = 3;

	cout << var1 << endl;
	cout << var2 << endl;

	//Получаем адрес
	cout << &var1 << endl;
	cout << &var2 << endl;

	//Переменная p стала указателем
	int* p;
	//Чтобы перечислить делать так:
	//int* p, *p2;
	//Так будет только первая переменная указателем:
	//int* p, p2;

	//Присваиваем адрес
	p = &var1;

	cout << p << endl;

	//Разыменовывание
	cout << *p << endl;

	*p = 11;
	cout << var1 << endl;

	//Попробуем перебрать массив
	int mas[] = { 1, 6, 3, 4, 2 };

	//Обычный перебор
	for (int i = 0; i < 5; i++)
	{
		cout << mas[i] << " ";
	}
	cout << endl;

	//Перебор используя указатели
	//Тут мы смещаемся, где то на 4 байта, и так выводим массив
	for (int i = 0; i < 5; i++) {
		cout << *(mas + i) << " ";
	}
	cout << endl;

	//Для передачи указателей в функцию
	int var3 = 3;

	cout << var3 << " + 5 = ";

	//Передаём туда адрес, а не переменную
	addFive(&var3);

	cout << var3 << endl;

	system("pause");
	return 0;
}

void addFive(int* n) {
	*n += 5;
}