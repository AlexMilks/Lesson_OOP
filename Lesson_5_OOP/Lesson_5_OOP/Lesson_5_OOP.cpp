#include <iostream>
using namespace std;

//Простой класс
//Объединение данных и функций, является стержневой идеей ООП

//Конструкторы, нужны для того чтобы при создании нового объекта, сразу же выполнялись ряд каких то действий
//От себя, что то типо он выбирает какой выбирать из конструкторов, основываясь на то что в скобках, при инициализации

//Деструктор, ныжны для того чтобы избавиться от объекта, выполняют базовые инструкции и чистят память

//:: - это оператор обращения
class NewYear
{

private:
	//Доступны только внутри класса, то есть методам класса
	//Методы - это функции
	//Обычно в private находятся Поля класса, то есть данные
	//Представим переменные как поля класса
	int current_year;
	int the_next_year;

	//Статическая переменная
	int static unix_year;
public:
	//Доступны во всех точках программы
	//Функции, то есть методы класса
	//Нам потребуются два метода

	//Конструктор без параметров
	//Сначала имя конструктора, то есть имя класса
	//Скобки пустые так как без параметров, потом инициализируем поля класса
	NewYear() : current_year(0), the_next_year(0) {
		//Тело
		unix_year = 1969;
	}

	//Конструктор с 2 параметрами
	//Инициазирируем поля класса, данными которые пришли в конструктор
	NewYear(int c, int n) : current_year(c), the_next_year(n) {
		unix_year = 1971;
	}

	//Конструктор с одним параметром
	NewYear(int c) : current_year(c) {
		the_next_year = ++c;
		unix_year = 1970;
	}

	~NewYear() {

	}
	void set() {
		cout << "Введите текущий год: ";
		cin >> current_year;

		cout << "Введите следующий год: ";
		cin >> the_next_year;
	}

	//Метод, для вывода на экран
	void show() {
		cout << "Текущий год: " << current_year << endl;
		cout << "Следующий год: " << the_next_year << endl;
	}

	//Для вывода статической переменной
	void show_stat() {
		cout << unix_year << endl;
	}
};

//Объявляем статическую переменную, делается это обращанием к классу к которому она принадлежит
//:: - это оператор обращения
int NewYear::unix_year;

int main() {
	setlocale(0, "");

	//Создаём объект нашего класса, объект n1
	NewYear n1;
	NewYear n2(1999, 2000);
	NewYear n3(2014);

	//Вывод будет 1970, и везде один так как по счёту в конструкторе он последний и там присваивается 1970
	n1.show_stat();
	n2.show_stat();
	n3.show_stat();

	//Выводим значения на экран, благодаря метода show
	cout << "Переменная n1" << endl;
	n1.show();

	cout << "Переменная n2" << endl;
	n2.show();

	cout << "Переменная n3" << endl;
	n3.show();

	//Закомментируем, чтобы посмотреть как работают конструкторы
	//Вызовем метод set и show, через оператор точка
	//n1.set();
	//n1.show();

	system("pause");
	return 0;
}